name: AssettoServer GameServer - Build and Push

permissions:
    contents: read
    packages: write
    actions: read

# This workflow builds and pushes the main game server container image
# The game server container runs the actual Assetto Corsa server process
#
# Triggers:
# - Manual dispatch with environment selection
# - Tags
# - Push to relevant paths
#
# Environments:
# - dev: For development and testing
# - staging: For staging deployment
# - prod: For production deployment

on:
    workflow_dispatch:
        inputs:
            environment:
                description: "Environment to deploy to"
                required: true
                default: "staging"
                type: choice
                options:
                    - dev
                    - staging
                    - prod
    push:
        tags:
            - "v*"
        paths:
            - "**"
            - ".github/workflows/docker.yaml"

jobs:
    build:
        if: |
            github.event_name == 'workflow_dispatch' ||
            contains(github.ref, 'refs/tags/')
        name: Build Docker Image
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        environment: ${{ github.event.inputs.environment || (contains(github.ref, 'refs/tags/') && 'prod') || 'staging' }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Set image tag suffix
              id: tag_suffix
              run: |
                  if [[ $GITHUB_REF == refs/tags/* ]]; then
                    BASE_BRANCH=$(git branch -r --contains $GITHUB_REF | grep -E 'origin/(main|master)' || echo "")
                    if [[ ! -z "$BASE_BRANCH" ]]; then
                      ENV="prod"
                    else
                      ENV="staging"
                    fi
                    # Extraire la version du tag (sans le 'v' initial)
                    VERSION=$(echo ${GITHUB_REF#refs/tags/} | sed 's/^v//')
                  else
                    ENV="${{ github.event.inputs.environment || 'staging' }}"
                    VERSION="latest"
                  fi
                  echo "suffix=.$ENV" >> $GITHUB_OUTPUT
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ghcr.io/${{ github.repository }}/assetto_corsa-server${{ steps.tag_suffix.outputs.suffix }}
                  tags: |
                      type=raw,value=${{ steps.tag_suffix.outputs.version }}
                      type=sha,format=long
                  labels: |
                      org.opencontainers.image.title=AssettoServer GameServer
                      org.opencontainers.image.description=Main Assetto Corsa server process
                      maintainer=CorsaClub

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./docker/Dockerfile
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  build-args: |
                      STEAM_USERNAME=${{ secrets.STEAM_USERNAME }}
                      STEAM_PASSWORD=${{ secrets.STEAM_PASSWORD }}

            - name: Setup GitHub CLI
              uses: cli/cli@v2.37.0
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Cleanup old versions
              run: |
                  set -e
                  REPO_OWNER=$(echo "${{ github.repository }}" | cut -d '/' -f 1 | tr '[:upper:]' '[:lower:]')
                  REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')
                  IMAGE_NAME="assetto_corsa-server${{ steps.tag_suffix.outputs.suffix }}"

                  echo "Cleaning up old versions for ${IMAGE_NAME}..."

                  # Amélioration de la gestion des erreurs pour la commande gh api
                  VERSIONS=$(gh api \
                    -H "Accept: application/vnd.github+json" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    "/users/${REPO_OWNER}/packages/container/${IMAGE_NAME}/versions" \
                    --jq '.[].metadata.container.tags[0]' | grep -v "latest" | sort -V || true)

                  # Vérification si VERSIONS est vide
                  if [ -z "$VERSIONS" ]; then
                    echo "No versions found to cleanup"
                    exit 0
                  fi

                  # Compter le nombre de versions
                  VERSION_COUNT=$(echo "$VERSIONS" | wc -l)

                  # Garder seulement les 2 dernières versions
                  if [ "$VERSION_COUNT" -gt 2 ]; then
                    VERSIONS_TO_DELETE=$(echo "$VERSIONS" | head -n $(($VERSION_COUNT - 2)))
                    
                    echo "Versions to delete:"
                    echo "$VERSIONS_TO_DELETE"
                    
                    echo "$VERSIONS_TO_DELETE" | while read VERSION; do
                      if [ ! -z "$VERSION" ]; then
                        echo "Deleting version: $VERSION"
                        VERSION_ID=$(gh api \
                          -H "Accept: application/vnd.github+json" \
                          -H "X-GitHub-Api-Version: 2022-11-28" \
                          "/users/${REPO_OWNER}/packages/container/${IMAGE_NAME}/versions" \
                          --jq ".[] | select(.metadata.container.tags[0]==\"${VERSION}\") | .id")
                        
                        if [ ! -z "$VERSION_ID" ]; then
                          gh api \
                            --method DELETE \
                            -H "Accept: application/vnd.github+json" \
                            -H "X-GitHub-Api-Version: 2022-11-28" \
                            "/users/${REPO_OWNER}/packages/container/${IMAGE_NAME}/versions/${VERSION_ID}"
                        fi
                      fi
                    done
                  fi

